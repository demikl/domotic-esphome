---
# substitutions:
#   rf433_tx_pin: "GPIO32"
#   rf433_rx_pin: "GPIO22"

remote_receiver:
  pin:
    number: ${rf433_rx_pin}
    mode:
      input: true
      pulldown: true
  filter: 4us
  idle: 4ms
  tolerance: 60%
  dump:
    - rc_switch

# logger:
#   level: DEBUG

remote_transmitter:
  pin: ${rf433_tx_pin}
  carrier_duty_percent: 100%

binary_sensor:
  - platform: remote_receiver
    name: SW1_ON
    rc_switch_raw:
      protocol: &protocol 7
      code: &sw1on "101011011101110111011100"
    filters:
      - delayed_off: 200ms
    on_press:
      then:
        - switch.template.publish:
            id: sw1
            state: "ON"

  - platform: remote_receiver
    name: SW1_OFF
    rc_switch_raw:
      protocol: *protocol
      code: &sw1off "101011011101110111010100"
    filters:
      - delayed_off: 200ms
    on_press:
      then:
        - switch.template.publish:
            id: sw1
            state: "OFF"

  - platform: remote_receiver
    name: SW2_ON
    rc_switch_raw:
      protocol: *protocol
      code: &sw2on "101011011101110111011010"
    filters:
      - delayed_off: 200ms
    on_press:
      then:
        - switch.template.publish:
            id: sw2
            state: "ON"

  - platform: remote_receiver
    name: SW2_OFF
    rc_switch_raw:
      protocol: *protocol
      code: &sw2off "101011011101110111010010"
    filters:
      - delayed_off: 200ms
    on_press:
      then:
        - switch.template.publish:
            id: sw2
            state: "OFF"

  - platform: remote_receiver
    name: SW3_ON
    rc_switch_raw:
      protocol: *protocol
      code: &sw3on "101011011101110111011001"
    filters:
      - delayed_off: 200ms
    on_press:
      then:
        - switch.template.publish:
            id: sw3
            state: "ON"

  - platform: remote_receiver
    name: SW3_OFF
    rc_switch_raw:
      protocol: *protocol
      code: &sw3off "101011011101110111010001"
    filters:
      - delayed_off: 200ms
    on_press:
      then:
        - switch.template.publish:
            id: sw3
            state: "OFF"

  - platform: remote_receiver
    name: SW4_ON
    rc_switch_raw:
      protocol: *protocol
      code: &sw4on "101011011101110111011101"
    filters:
      - delayed_off: 200ms
    on_press:
      then:
        - switch.template.publish:
            id: sw4
            state: "ON"

  - platform: remote_receiver
    name: SW4_OFF
    rc_switch_raw:
      protocol: *protocol
      code: &sw4off "101011011101110111010101"
    filters:
      - delayed_off: 200ms
    on_press:
      then:
        - switch.template.publish:
            id: sw4
            state: "OFF"

  - platform: remote_receiver
    name: SW5_ON
    rc_switch_raw:
      protocol: *protocol
      code: &sw5on "101011011101110111011011"
    filters:
      - delayed_off: 200ms
    on_press:
      then:
        - switch.template.publish:
            id: sw5
            state: "ON"

  - platform: remote_receiver
    name: SW5_OFF
    rc_switch_raw:
      protocol: *protocol
      code: &sw5off "101011011101110111010011"
    filters:
      - delayed_off: 200ms
    on_press:
      then:
        - switch.template.publish:
            id: sw5
            state: "OFF"

switch:
  - platform: template
    id: sw1
    name: SW1
    optimistic: true
    assumed_state: true
    turn_on_action:
      - remote_transmitter.transmit_rc_switch_raw:
          code: *sw1on
          protocol: *protocol
          repeat: &repeat_rf
            times: 10
            wait_time: 0s
    turn_off_action:
      - remote_transmitter.transmit_rc_switch_raw:
          code: *sw1off
          protocol: *protocol
          repeat: *repeat_rf
  - platform: template
    id: sw2
    name: SW2
    optimistic: true
    assumed_state: true
    turn_on_action:
      - remote_transmitter.transmit_rc_switch_raw:
          code: *sw2on
          protocol: *protocol
          repeat: *repeat_rf
    turn_off_action:
      - remote_transmitter.transmit_rc_switch_raw:
          code: *sw2off
          protocol: *protocol
          repeat: *repeat_rf
  - platform: template
    id: sw3
    name: SW3
    optimistic: true
    assumed_state: true
    turn_on_action:
      - remote_transmitter.transmit_rc_switch_raw:
          code: *sw3on
          protocol: *protocol
          repeat: *repeat_rf
    turn_off_action:
      - remote_transmitter.transmit_rc_switch_raw:
          code: *sw3off
          protocol: *protocol
          repeat: *repeat_rf
  - platform: template
    id: sw4
    name: SW4
    optimistic: true
    assumed_state: true
    turn_on_action:
      - remote_transmitter.transmit_rc_switch_raw:
          code: *sw4on
          protocol: *protocol
          repeat: *repeat_rf
    turn_off_action:
      - remote_transmitter.transmit_rc_switch_raw:
          code: *sw4off
          protocol: *protocol
          repeat: *repeat_rf
  - platform: template
    id: sw5
    name: SW5
    optimistic: true
    assumed_state: true
    turn_on_action:
      - remote_transmitter.transmit_rc_switch_raw:
          code: *sw5on
          protocol: *protocol
          repeat: *repeat_rf
    turn_off_action:
      - remote_transmitter.transmit_rc_switch_raw:
          code: *sw5off
          protocol: *protocol
          repeat: *repeat_rf

  - platform: template
    id: projecteur_etoiles
    name: Projecteur étoiles
    optimistic: true
    assumed_state: false  # un seul bouton toggle pour ON / OFF
    turn_on_action:
      - remote_transmitter.transmit_rc_switch_raw:
          code: &rc_code_projecteur_etoiles "011001000001111000000001"
          protocol: 1
          repeat: *repeat_rf
    turn_off_action:
      - remote_transmitter.transmit_rc_switch_raw:
          code: *rc_code_projecteur_etoiles
          protocol: 1
          repeat: *repeat_rf

select:
  - platform: template
    name: Durée projecteur étoiles
    optimistic: true
    options:
      - 2h
      - 4h
      - 6h
      - RESET
    initial_option: RESET
    set_action:
      - if:
          condition:
            - lambda: 'return x == "2h";'
          then:
            - remote_transmitter.transmit_rc_switch_raw:
                code: "011001000001111000010011"
                protocol: 1
                repeat: *repeat_rf
      - if:
          condition:
            - lambda: 'return x == "4h";'
          then:
            - remote_transmitter.transmit_rc_switch_raw:
                code: "011001000001111000010100"
                protocol: 1
                repeat: *repeat_rf
      - if:
          condition:
            - lambda: 'return x == "6h";'
          then:
            - remote_transmitter.transmit_rc_switch_raw:
                code: "011001000001111000010101"
                protocol: 1
                repeat: *repeat_rf
      - if:
          condition:
            - lambda: 'return x == "RESET";'
          then:
            - remote_transmitter.transmit_rc_switch_raw:
                code: "011001000001111000001011"
                protocol: 1
                repeat: *repeat_rf