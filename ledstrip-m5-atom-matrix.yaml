substitutions:
  devicename: ledstrip-matrix
  upper_devicename: Bureau-matrix

packages:
  device_base: !include common/device_base.yaml
  device_esp32: !include common/device_esp32.yaml

esphome:
  name_add_mac_suffix: true
  on_boot:
    priority: -10
    then:
      - lambda: |-
          if (!id(ambiance_inited)) {
            for (int i = 0; i < 32; i++) id(ambiance_seeds)[i] = esp_random();
            id(ambiance_inited) = true;
          }

button:
  - platform: template
    name: "Ambiance Forêt"
    id: ambiance_foret
    on_press:
      - light.turn_on:
          id: matrix
          effect: "Ambiance Forêt"
      - light.turn_on:
          id: porte_bas
          effect: "Ambiance Forêt"
      - light.turn_on:
          id: porte_haut
          effect: "Ambiance Forêt"

  - platform: template
    name: "Ambiance Aquatique"
    id: ambiance_aquatique
    on_press:
      - light.turn_on:
          id: matrix
          effect: "Ambiance Aquatique"
      - light.turn_on:
          id: porte_bas
          effect: "Ambiance Aquatique"
      - light.turn_on:
          id: porte_haut
          effect: "Ambiance Aquatique"

  - platform: template
    name: "Ambiance Cheminée"
    id: ambiance_cheminee
    on_press:
      - light.turn_on:
          id: matrix
          effect: "Ambiance Cheminée"
      - light.turn_on:
          id: porte_bas
          effect: "Ambiance Cheminée"
      - light.turn_on:
          id: porte_haut
          effect: "Ambiance Cheminée"

  - platform: template
    name: "Éteindre toutes les ambiances"
    id: eteindre_ambiances
    on_press:
      - light.turn_off:
          id: matrix
      - light.turn_off:
          id: porte_bas
      - light.turn_off:
          id: porte_haut

esp32:
  board: pico32

wifi:
  manual_ip:
    static_ip: 192.168.1.206
    gateway: 192.168.1.1
    subnet: 255.255.255.0

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO39
      inverted: true
    name: ${upper_devicename} Button

spi:
  mosi_pin: GPIO25
  clk_pin: GPIO21

# Ambiances as addressable async effects (Option 2)
globals:
  - id: ambiance_seeds
    type: uint32_t[32]
  - id: ambiance_inited
    type: bool
    initial_value: 'false'

light:
  - platform: esp32_rmt_led_strip
    chipset: WS2812
    pin: GPIO27
    num_leds: 25
    rgb_order: GRB
    name: ${upper_devicename} Led Matrix
    id: matrix
    color_correct: [40%, 40%, 40%]
    effects:
      - addressable_rainbow:
      - addressable_color_wipe:
      - addressable_scan:
      - addressable_twinkle:
      - addressable_random_twinkle:
      - addressable_fireworks:
      - addressable_lambda:
          name: "Ambiance Forêt"
          update_interval: 300ms
          lambda: |-
            const uint32_t t = millis();
            for (int i = 0; i < it.size(); i++) {
              uint32_t seed = id(ambiance_seeds)[i % 32];
              float slow = fmodf((t / 60000.0f) + ((seed & 0xFF) / 255.0f), 1.0f); // très lent
              float branch = ((seed >> 8) & 0xFF) / 255.0f;
              float hue;
              if (branch < 0.18f) {
                hue = 30.0f + 10.0f * slow;            // Amber sous-bois
              } else if (branch < 0.30f) {
                hue = 45.0f + 5.0f * slow;             // Mousse jaunâtre
              } else {
                hue = 80.0f + 50.0f * slow;            // Vert profond -> vert jaunâtre
              }
              float sat = 0.55f + 0.35f * (((seed >> 16) & 0xFF) / 255.0f);
              float bri = 0.25f + 0.5f * (0.5f + 0.5f * sinf((t / 5000.0f) + (i * 0.27f) + (seed & 0x0F)));
              it[i] = ESPHSVColor((uint8_t) hue, (uint8_t) (sat * 255.0f), (uint8_t) (bri * 255.0f));
            }
      - addressable_lambda:
          name: "Ambiance Aquatique"
          update_interval: 400ms
          lambda: |-
            const uint32_t t = millis();
            for (int i = 0; i < it.size(); i++) {
              uint32_t seed = id(ambiance_seeds)[(i * 3) % 32];
              float slow = fmodf((t / 45000.0f) + ((seed & 0xFF) / 255.0f), 1.0f); // houle lente
              float hue = 160.0f + 80.0f * slow; // 160-240 (vert d'eau -> bleu profond)
              // Accent cyan pulsé
              if (((seed >> 8) & 0xFF) < 24 && slow > 0.6f) {
                hue = 190.0f + 30.0f * sinf(t / 3000.0f + i * 0.4f);
              }
              // Rare éclat violet
              if ((((seed >> 10) & 0x3F) == 0) && (t % 20000 < 1200)) {
                hue = 265.0f; // violet court
              }
              float sat = 0.50f + 0.40f * (((seed >> 16) & 0xFF) / 255.0f);
              float shimmer = 0.04f * sinf(t / 700.0f + i * 0.9f + (seed & 0x1F));
              float bri = 0.30f + 0.55f * (0.5f + 0.5f * sinf((t / 8000.0f) + i * 0.19f)) + shimmer;
              if (bri > 1.0f) bri = 1.0f; if (bri < 0.02f) bri = 0.02f;
              it[i] = ESPHSVColor((uint8_t) hue, (uint8_t) (sat * 255.0f), (uint8_t) (bri * 255.0f));
            }
      - addressable_lambda:
          name: "Ambiance Cheminée"
          update_interval: 120ms
          lambda: |-
            const uint32_t t = millis();
            for (int i = 0; i < it.size(); i++) {
              uint32_t seed = id(ambiance_seeds)[(i * 5 + 7) % 32];
              float phase = (t / 900.0f) + i * 0.9f + (seed & 0x1F);
              // chaleur de base
              float heat = 0.4f + 0.6f * (0.5f + 0.5f * sinf(phase));
              // Flicker aléatoire
              if ((random_uint32() & 0x1F) == 0) {
                heat = 1.0f;
              }
              float hue = 15.0f + 25.0f * (1.0f - heat); // plus chaud -> plus vers jaune
              float sat = 0.75f - 0.45f * heat; // quand heat haut -> tire vers blanc
              float bri = 0.15f + 0.85f * heat;
              // étincelle rare
              if ((random_uint32() % 110) == 0) {
                hue = 10.0f; sat = 0.10f; bri = 1.0f;
              }
              if (sat < 0.0f) sat = 0.0f; if (sat > 1.0f) sat = 1.0f;
              if (bri > 1.0f) bri = 1.0f; if (bri < 0.02f) bri = 0.02f;
              it[i] = ESPHSVColor((uint8_t) hue, (uint8_t) (sat * 255.0f), (uint8_t) (bri * 255.0f));
            }

  - platform: spi_led_strip
    id: ledstrip_p9813
    name: ledstrip
    data_rate: 1MHz
    num_leds: 2
  #   effects:
  #     - <<: !include common/light_effect_alarme.yaml
  #     - pulse:
  #     - addressable_rainbow:
  #     - flicker:
  #     - flicker:
  #         name: Flicker more deviant
  #         alpha: 60%
  #     - flicker:
  #         name: Flicker more intense and deviant
  #         intensity: 20%
  #         alpha: 60%
  #     - random:
  #     - addressable_twinkle:
  #     - addressable_random_twinkle:
  #     - addressable_fireworks:
  #     - addressable_fireworks:
  #         name: Fireworks Effect With Random Colors
  #         use_random_color: true
  #     - addressable_fireworks:
  #         name: Very slow Fireworks Effect With Random Colors
  #         use_random_color: true
  #         spark_probability: 20%
  #         fade_out_rate: 90
  #     - addressable_flicker:
  #     - addressable_flicker:
  #         name: Addressable Flicker more intense
  #         intensity: 60%
  #     - addressable_color_wipe:
  #     - addressable_color_wipe:
  #         name: Color Wipe Effect With Custom Values
  #         add_led_interval: 1s
  #     - addressable_lambda:
  #         name: "Fireplace simple"
  #         update_interval: 30ms
  #         lambda: |-
  #           // it.size() - Number of LEDs
  #           // it[num] - Access the LED at index num.
  #           // Set the LED at num to the given r, g, b values
  #           // it[num] = ESPColor(r, g, b);
  #           // Get the color at index num (ESPColor instance)
  #           // it[num].get();

  #           it[0] = ESPHSVColor(30 + random_uint32() % 30, 255, 135 + random_uint32() % 120).to_rgb();
  #           it[1] = ESPHSVColor(random_uint32() % 30, 255, 135 + random_uint32() % 120).to_rgb();
  #           it[2] = ESPHSVColor(42, 255, 135 + random_uint32() % 120).to_rgb();

  - platform: partition
    name: "porte bas"
    id: porte_bas
    segments:
      - id: ledstrip_p9813
        from: 0
        to: 0
    effects:
      - pulse:
      - addressable_lambda:
          name: "Ambiance Forêt"
          update_interval: 300ms
          lambda: |-
            // Partition "porte bas" seed index 30
            const uint32_t t = millis();
            uint32_t seed = id(ambiance_seeds)[30];
            // Single LED
            if (it.size() == 0) return;
            float slow = fmodf((t / 61000.0f) + ((seed & 0xFF) / 255.0f), 1.0f);
            float branch = ((seed >> 8) & 0xFF) / 255.0f;
            float hue = (branch < 0.25f) ? (32.0f + 12.0f * slow) : (78.0f + 42.0f * slow);
            float sat = 0.60f + 0.30f * (((seed >> 16) & 0xFF) / 255.0f);
            float bri = 0.35f + 0.45f * (0.5f + 0.5f * sinf((t / 5200.0f) + (seed & 0x0F)));
            it[0] = ESPHSVColor((uint8_t) hue, (uint8_t)(sat*255.0f), (uint8_t)(bri*255.0f));
      - addressable_lambda:
          name: "Ambiance Aquatique"
          update_interval: 400ms
          lambda: |-
            const uint32_t t = millis();
            uint32_t seed = id(ambiance_seeds)[30] ^ 0xA55A5A5A;
            if (it.size() == 0) return;
            float slow = fmodf((t / 47000.0f) + ((seed & 0xFF) / 255.0f), 1.0f);
            float hue = 170.0f + 70.0f * slow;
            if (((seed >> 10) & 0x3F) == 3 && (t % 18000 < 900)) hue = 265.0f;
            float sat = 0.55f + 0.35f * (((seed >> 16) & 0xFF) / 255.0f);
            float bri = 0.30f + 0.55f * (0.5f + 0.5f * sinf((t / 7000.0f) + (seed & 0x1F)));
            it[0] = ESPHSVColor((uint8_t) hue, (uint8_t)(sat*255.0f), (uint8_t)(bri*255.0f));
      - addressable_lambda:
          name: "Ambiance Cheminée"
          update_interval: 120ms
          lambda: |-
            const uint32_t t = millis();
            uint32_t seed = id(ambiance_seeds)[30] ^ 0x55AA55AA;
            if (it.size() == 0) return;
            float heat = 0.45f + 0.55f * (0.5f + 0.5f * sinf((t / 950.0f) + (seed & 0x1F)));
            if ((random_uint32() & 0x1F) == 0) heat = 1.0f;
            float hue = 16.0f + 24.0f * (1.0f - heat);
            float sat = 0.80f - 0.50f * heat;
            float bri = 0.18f + 0.82f * heat;
            if ((random_uint32() % 95) == 0) { hue = 10.0f; sat = 0.05f; bri = 1.0f; }
            if (sat < 0.0f) sat = 0.0f;
            it[0] = ESPHSVColor((uint8_t)hue,(uint8_t)(sat*255.0f),(uint8_t)(bri*255.0f));


  - platform: partition
    name: "porte haut"
    id: porte_haut
    segments:
      - id: ledstrip_p9813
        from: 1
        to: 1
    effects:
      - pulse:
      - addressable_lambda:
          name: "Ambiance Forêt"
          update_interval: 300ms
          lambda: |-
            // Partition "porte haut" seed index 31
            const uint32_t t = millis();
            uint32_t seed = id(ambiance_seeds)[31];
            if (it.size() == 0) return;
            float slow = fmodf((t / 60500.0f) + ((seed & 0xFF) / 255.0f), 1.0f);
            float branch = ((seed >> 8) & 0xFF) / 255.0f;
            float hue = (branch < 0.20f) ? (34.0f + 11.0f * slow) : (82.0f + 46.0f * slow);
            float sat = 0.58f + 0.32f * (((seed >> 16) & 0xFF) / 255.0f);
            float bri = 0.33f + 0.47f * (0.5f + 0.5f * sinf((t / 5300.0f) + (seed & 0x0F)));
            it[0] = ESPHSVColor((uint8_t) hue, (uint8_t)(sat*255.0f), (uint8_t)(bri*255.0f));
      - addressable_lambda:
          name: "Ambiance Aquatique"
          update_interval: 400ms
          lambda: |-
            const uint32_t t = millis();
            uint32_t seed = id(ambiance_seeds)[31] ^ 0xA55A5A5A;
            if (it.size() == 0) return;
            float slow = fmodf((t / 46500.0f) + ((seed & 0xFF) / 255.0f), 1.0f);
            float hue = 165.0f + 75.0f * slow;
            if (((seed >> 10) & 0x3F) == 5 && (t % 20000 < 1100)) hue = 268.0f;
            float sat = 0.53f + 0.37f * (((seed >> 16) & 0xFF) / 255.0f);
            float bri = 0.32f + 0.50f * (0.5f + 0.5f * sinf((t / 7200.0f) + (seed & 0x1F)));
            it[0] = ESPHSVColor((uint8_t) hue, (uint8_t)(sat*255.0f), (uint8_t)(bri*255.0f));
      - addressable_lambda:
          name: "Ambiance Cheminée"
          update_interval: 120ms
          lambda: |-
            const uint32_t t = millis();
            uint32_t seed = id(ambiance_seeds)[31] ^ 0x55AA55AA;
            if (it.size() == 0) return;
            float heat = 0.42f + 0.58f * (0.5f + 0.5f * sinf((t / 910.0f) + (seed & 0x1F)));
            if ((random_uint32() & 0x1F) == 0) heat = 1.0f;
            float hue = 17.0f + 23.0f * (1.0f - heat);
            float sat = 0.82f - 0.50f * heat;
            float bri = 0.17f + 0.83f * heat;
            if ((random_uint32() % 105) == 0) { hue = 9.0f; sat = 0.06f; bri = 1.0f; }
            if (sat < 0.0f) sat = 0.0f;
            it[0] = ESPHSVColor((uint8_t)hue,(uint8_t)(sat*255.0f),(uint8_t)(bri*255.0f));
