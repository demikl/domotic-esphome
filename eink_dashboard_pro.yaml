substitutions:
  devicename: eink-dashboard
  upper_devicename: "E-Ink Weather Dashboard"

packages:
  device_base: !include common/device_base.yaml
  device_esp32: !include common/device_esp32.yaml

esphome:
  name_add_mac_suffix: true

esp32:
  # WROOM 32U
  variant: esp32

# Enable logging with reduced level for performance
logger:
  level: WARN
  baud_rate: 0  # Disable UART logging for better performance

wifi:
  manual_ip:
    # pour une connection rapide, et pour que le conteneur docker esphome puisse trouver l'ESP sans mDNS
    static_ip: 192.168.1.234
    gateway: 192.168.1.1
    subnet: 255.255.255.0


# Time component for clock display
time:
  - platform: homeassistant
    id: homeassistant_time
    timezone: Europe/Paris
    on_time_sync:
      then:
        # Update display 10 seconds after boot/time sync
        - delay: 2s
        - component.update: eink_display

# SPI configuration for the display
spi:
  clk_pin: GPIO18
  mosi_pin: GPIO23
  id: spi_main
  interface: hardware

# pour support des écrans Waveshare e-Paper 4.2inch v2.2
external_components:
  - source: github://pr#6209
    components: [waveshare_epaper]

# Advanced font definitions with more glyphs
font:
  # Main display fonts
  - file: "gfonts://Roboto@700"
    id: font_header
    size: 20
    glyphs: "0123456789:°C%|.m"

  - file: "gfonts://Roboto@700"
    id: font_header_small
    size: 12
    glyphs: "0123456789:°C%|.m"
  
  - file: "gfonts://Roboto@400"
    id: font_body
    size: 20
    glyphs: "0123456789:°%|abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ .,!?-+/éèàûôîçÉÈÀÛÔÎÇ"
  
  - file: "gfonts://Roboto@300"
    id: font_caption
    size: 14
    glyphs: "0123456789:°%|abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ .,!?-+/éèàûôîçÉÈÀÛÔÎÇ"
  
  - file: "gfonts://Roboto@500"
    id: font_time
    size: 52
    glyphs: "0123456789:"
  
  - file: "gfonts://Roboto@300"
    id: font_date
    size: 18
    glyphs: "0123456789|abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ .,!?-+/éèàûôîçÉÈÀÛÔÎÇ"

  # Weather and utility icons
  - file: "https://github.com/Templarian/MaterialDesign-Webfont/raw/master/fonts/materialdesignicons-webfont.ttf"
    id: font_weather_icons_small
    size: 24
    glyphs:
      - "\U000F0596" # mdi:weather-rainy

  # Weather and utility icons
  - file: "https://github.com/Templarian/MaterialDesign-Webfont/raw/master/fonts/materialdesignicons-webfont.ttf"
    id: font_weather_icons
    size: 36
    glyphs:
      - "\U000F0599" # mdi:weather-sunny
      - "\U000F0590" # mdi:weather-cloudy  
      - "\U000F0595" # mdi:weather-partly-cloudy
      - "\U000F0596" # mdi:weather-rainy
      - "\U000F0598" # mdi:weather-snowy
      - "\U000F050F" # mdi:thermometer - temperature
      - "\U000F058E" # mdi:water-percent - humidity
      - "\U000F059D" # mdi:weather-windy - wind
      - "\U000F0423" # mdi:gauge - pressure
      - "\U000F081C" # mdi:door (correct)
      - "\U000F081D" # mdi:door-open (correct)
      - "\U000F06D3" # mdi:garage (correct)
      - "\U000F06D4" # mdi:garage-open (correct)
      - "\U000F109E" # mdi:window-maximize (correct)
      - "\U000F05B0" # mdi:window-restore (correct)
      - "\U000F0341" # mdi:home - house icon
      - "\U000F02DC" # mdi:lock

  - file: "https://github.com/Templarian/MaterialDesign-Font/raw/master/MaterialDesignIconsDesktop.ttf"
    id: icons_50
    size: 50
    glyphs:
      - "\U000F06D9"  # mdi:garage
      - "\U000F06DA"  # mdi:garage-open
      - "\U000F081B"  # mdi:door-closed
      - "\U000F081C"  # mdi:door-open
      - "\U000F181E"  # mdi:door-sliding
      - "\U000F1820"  # mdi:door-sliding-open
      - "\U000F11DB"  # mdi:window-closed-variant
      - "\U000F11DC"  # mdi:window-open-variant
      - "\U000F068A"  # mdi:shield-home

color:
  - id: color_dark_gray
    red_int: 169
    green_int: 169
    blue_int: 169
  - id: color_light_gray
    red_int: 84
    green_int: 84
    blue_int: 84

# Advanced display configuration with LVGL
display:
  - platform: waveshare_epaper
    cs_pin: GPIO5
    dc_pin: GPIO17
    busy_pin: GPIO4
    reset_pin: GPIO16
    model: 4.20in-v2
    display_mode: GRAYSCALE4
    id: eink_display
    update_interval: 10min
    rotation: 0°
    
    lambda: |-
      // Constants for layout inspired by the reference image
      const int SCREEN_WIDTH = 400;
      const int SCREEN_HEIGHT = 300;
      const int MARGIN = 8;
      const int SECTION_SPACING = 4;
      
      // Clear display with BLACK background
      it.fill(COLOR_ON);

      // coin superieur gauche arrondi
      // cercle de centre 300,300, rayon 300
      it.filled_circle(300, 300, 300, COLOR_OFF);

      // il reste une zone en haut à droite qui est noire, on force un rectangle blanc
      // à partir de x=300 jusqu'à la fin de l'écran
      it.filled_rectangle(300, 0, SCREEN_WIDTH - 300, 300, COLOR_OFF);
      
      // Get current time
      auto time = id(homeassistant_time).now();

      // affichage de l'heure
      it.strftime(4, 4, id(font_time), COLOR_OFF, "%H:%M", time);

      // juste en dessous, icône météo actuelle, puis symbole pipe, puis température, puis pipe
      it.printf(4, 56, id(font_weather_icons), COLOR_OFF, "\U000F0599"); // icône soleil
      // symbole pipe
      it.printf(36, 60, id(font_header), color_dark_gray, "|");
      // température actuelle
      it.printf(40, 60, id(font_header), color_dark_gray, "22°C"); // température actuelle
      
      // en dessous, prévision de précipitations cumulées en mm d'eau
      // symbole goutte d'eau
      it.printf(4, 90, id(font_weather_icons_small), COLOR_OFF, "\U000F0596"); // icône pluie
      // symbole pipe
      it.printf(26, 92, id(font_header_small), color_light_gray, "|");
      // precipitations
      it.printf(28, 92, id(font_header_small), color_light_gray, "2.3mm"); // prévision de précipitations cumulées en mm d'eau

      // ligne horizontale
      it.filled_rectangle(0, 115, 60, 3, color_light_gray);

      // a droite, une section de largeur 80 pixels de largeur, divisée en 5 sections de 60 pixels de hauteur chacune
      // délimitations par une ligne de couleur color_dark_gray
      int right_section_x = SCREEN_WIDTH - 80;
      int section_h = 60;

      // Ligne verticale pour délimiter la section de droite
      it.vertical_line(right_section_x, 0, SCREEN_HEIGHT, id(color_dark_gray));

      // Lignes horizontales pour diviser la section en 5
      for (int i = 1; i < 5; ++i) {
        int y = i * section_h;
        it.horizontal_line(right_section_x, y, 80, id(color_dark_gray));
      }

      // dans chaque section, il y aura une grande icône centrée horizontalement dans la section,
      // et en dessous un petit texte centré horizontalement dans la section
      // si état = fermé ou inactif, fond blanc, icône noire, texte noir
      // si état = ouvert ou actif, fond color_dark_gray, icône blanche, rectangle noir derriere le texte, texte blanc
      // le contenu, de haut en bas :
      // 1. porte de garage (fermée)
      // 2. porte d'entrée (ouverte)
      // 3. fenêtre salon (ouverte)
      // 4. fenêtre chambre (fermée)
      // 5. alarme (activée)

      // Configuration des états des équipements
      struct EquipmentState {
        const char* label;
        const char* icon_closed;
        const char* icon_open;
        bool is_open;
      };
      
      EquipmentState equipment[5] = {
        {"Garage", "\U000F06D9", "\U000F06DA", false},    // garage fermé
        {"Entrée", "\U000F081B", "\U000F081C", true},     // porte d'entrée ouverte
        {"Salon", "\U000F181E", "\U000F1820", true},      // fenêtre salon ouverte (porte coulissante)
        {"Chambre", "\U000F11DB", "\U000F11DC", false},   // fenêtre chambre fermée
        {"Alarme", "", "\U000F068A", true}                // alarme activée (rien si inactive, shield-home si active)
      };

      // Dessiner chaque section
      for (int i = 0; i < 5; i++) {
        int section_y = i * section_h;
        int icon_x = right_section_x + 40; // centre horizontal de la section (80/2 = 40)
        int icon_y = section_y;
        int text_x = right_section_x + 40;
        int text_y = section_y + 45;
        
        // Déterminer les couleurs selon l'état
        auto bg_color = equipment[i].is_open ? id(color_dark_gray) : COLOR_OFF;
        auto icon_color = equipment[i].is_open ? COLOR_OFF : COLOR_ON;
        auto text_color = equipment[i].is_open ? COLOR_OFF : COLOR_ON;
        
        // Fond de la section
        it.filled_rectangle(right_section_x + 1, section_y + 1, 78, section_h - 2, bg_color);
        
        // Icône centrée
        const char* icon = equipment[i].is_open ? equipment[i].icon_open : equipment[i].icon_closed;
        
        // Cas spécial pour l'alarme : n'afficher l'icône que si elle est active
        if (strcmp(equipment[i].label, "Alarme") == 0) {
          if (equipment[i].is_open) {
            it.printf(icon_x - 25, icon_y, id(icons_50), icon_color, icon);
          }
          // Si alarme inactive, ne rien afficher
        } else {
          // Pour les autres équipements, afficher l'icône normalement
          it.printf(icon_x - 25, icon_y, id(icons_50), icon_color, icon);
        }
        
        // Si état actif, rectangle noir derrière le texte
        if (equipment[i].is_open) {
          it.filled_rectangle(right_section_x + 1, text_y - 2, 78, 16, COLOR_ON);
        }
        
        // Texte centré
        it.printf(text_x, text_y, id(font_caption), text_color,  TextAlign::TOP_CENTER, equipment[i].label);


        // carré de debug des niveaux de gris
        it.filled_rectangle(100, 100, 30, 30, COLOR_ON);
        it.filled_rectangle(140, 100, 30, 30, id(color_dark_gray));
        it.filled_rectangle(180, 100, 30, 30, id(color_light_gray));
        it.rectangle(220, 100, 30, 30, COLOR_ON);
      }


# Sensors for real weather data integration
sensor:
  - platform: homeassistant
    id: outdoor_temperature
    entity_id: weather.forecast_home
    attribute: temperature
    
  - platform: homeassistant
    id: outdoor_humidity
    entity_id: weather.forecast_home
    attribute: humidity
    
  - platform: homeassistant
    id: pressure
    entity_id: weather.forecast_home
    attribute: pressure
    
  - platform: homeassistant
    id: wind_speed
    entity_id: weather.forecast_home
    attribute: wind_speed

  # Indoor sensors (if you have them)
  - platform: homeassistant
    id: indoor_temperature
    entity_id: sensor.indoor_temperature
    
  - platform: homeassistant
    id: indoor_humidity
    entity_id: sensor.indoor_humidity

# Text sensors for conditions and forecasts
text_sensor:
  - platform: homeassistant
    id: weather_condition
    entity_id: weather.forecast_home
    
  - platform: homeassistant
    id: weather_forecast
    entity_id: weather.forecast_home
    attribute: forecast

# Automation for smart updates
script:
  - id: smart_update
    then:
      - logger.log: "Smart update triggered"
      - component.update: eink_display

# Button for manual refresh
button:
  - platform: template
    name: "Refresh Dashboard"
    on_press:
      then:
        - script.execute: smart_update

# Deep sleep management for power efficiency
deep_sleep:
  id: deep_sleep_control
  sleep_duration: 30min
  
# Wake up button
binary_sensor:
  - platform: gpio
    pin:
      number: GPIO0
      inverted: true
      mode:
        input: true
        pullup: true
    name: "Wake Up Button"
    on_press:
      then:
        - deep_sleep.prevent: deep_sleep_control
        - script.execute: smart_update

# Status LED for feedback
status_led:
  pin:
    number: GPIO2
    inverted: true
