substitutions:
  devicename: eink-dashboard
  upper_devicename: "E-Ink Weather Dashboard"

packages:
  device_base: !include common/device_base.yaml
  device_esp32: !include common/device_esp32.yaml

esphome:
  name_add_mac_suffix: true

esp32:
  # WROOM 32U
  variant: esp32

# Enable logging with reduced level for performance
logger:
  level: WARN
  baud_rate: 0  # Disable UART logging for better performance

wifi:
  manual_ip:
    # pour une connection rapide, et pour que le conteneur docker esphome puisse trouver l'ESP sans mDNS
    static_ip: 192.168.1.234
    gateway: 192.168.1.1
    subnet: 255.255.255.0


# Time component for clock display
time:
  - platform: homeassistant
    id: homeassistant_time
    timezone: Europe/Paris
    on_time_sync:
      then:
        # Update display 10 seconds after boot/time sync
        - delay: 2s
        - component.update: eink_display

# SPI configuration for the display
spi:
  clk_pin: GPIO18
  mosi_pin: GPIO23
  id: spi_main
  interface: hardware

# pour support des écrans Waveshare e-Paper 4.2inch v2.2
external_components:
  - source: github://pr#6209
    components: [waveshare_epaper]

# Advanced font definitions with more glyphs
font:
  # Main display fonts
  - file: "gfonts://Roboto@700"
    id: font_header
    size: 42
    glyphs: "0123456789:°C%"
  
  - file: "gfonts://Roboto@400"
    id: font_body
    size: 20
    glyphs: "0123456789:°%|abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ .,!?-+/éèàûôîçÉÈÀÛÔÎÇ"
  
  - file: "gfonts://Roboto@300"
    id: font_caption
    size: 14
    glyphs: "0123456789:°%|abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ .,!?-+/éèàûôîçÉÈÀÛÔÎÇ"
  
  - file: "gfonts://Roboto@500"
    id: font_time
    size: 52
    glyphs: "0123456789:"
  
  - file: "gfonts://Roboto@300"
    id: font_date
    size: 18
    glyphs: "0123456789|abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ .,!?-+/éèàûôîçÉÈÀÛÔÎÇ"

  # Weather and utility icons
  - file: "https://github.com/Templarian/MaterialDesign-Webfont/raw/master/fonts/materialdesignicons-webfont.ttf"
    id: font_weather_icons
    size: 36
    glyphs:
      - "\U000F0599" # mdi:weather-sunny
      - "\U000F0590" # mdi:weather-cloudy  
      - "\U000F0595" # mdi:weather-partly-cloudy
      - "\U000F0596" # mdi:weather-rainy
      - "\U000F0598" # mdi:weather-snowy
      - "\U000F050F" # mdi:thermometer - temperature
      - "\U000F058E" # mdi:water-percent - humidity
      - "\U000F059D" # mdi:weather-windy - wind
      - "\U000F0423" # mdi:gauge - pressure
      - "\U000F081C" # mdi:door (correct)
      - "\U000F081D" # mdi:door-open (correct)
      - "\U000F06D3" # mdi:garage (correct)
      - "\U000F06D4" # mdi:garage-open (correct)
      - "\U000F109E" # mdi:window-maximize (correct)
      - "\U000F05B0" # mdi:window-restore (correct)
      - "\U000F0341" # mdi:home - house icon
      - "\U000F02DC" # mdi:lock

color:
  - id: color_dark_gray
    red_int: 169
    green_int: 169
    blue_int: 169
  - id: color_light_gray
    red_int: 84
    green_int: 84
    blue_int: 84

# Advanced display configuration with LVGL
display:
  - platform: waveshare_epaper
    cs_pin: GPIO5
    dc_pin: GPIO17
    busy_pin: GPIO4
    reset_pin: GPIO16
    model: 4.20in-v2
    display_mode: GRAYSCALE4
    id: eink_display
    update_interval: 10min
    rotation: 0°
    
    lambda: |-
      // Constants for layout inspired by the reference image
      const int SCREEN_WIDTH = 400;
      const int SCREEN_HEIGHT = 300;
      const int MARGIN = 8;
      const int SECTION_SPACING = 4;
      
      // Clear display with white background
      it.fill(COLOR_OFF);
      
      // Get current time
      auto time = id(homeassistant_time).now();
      
      // === TOP HEADER BAR ===
      // White header bar with black divider
      it.filled_rectangle(0, 0, SCREEN_WIDTH, 60, COLOR_OFF);
      
      // Date section (left) - black text on white
      it.printf(10, 8, id(font_caption), COLOR_ON, "VEN");
      it.printf(10, 22, id(font_body), COLOR_ON, "OCT 22, 2025");
      
      // Time section (center) - format 24h français
      it.strftime(140, 8, id(font_time), COLOR_ON, "%H:%M", time);
      
      // Status icons (right side) - black on white
      it.printf(350, 15, id(font_weather_icons), COLOR_ON, "\U000F0599");
      
      // === WEATHER SECTION ===
      int weather_y = 70;
      int weather_h = 35;
      
      // Weather info line
      it.printf(10, weather_y, id(font_body), COLOR_ON, "22°C | Ensoleillé");
      it.printf(200, weather_y, id(font_weather_icons), COLOR_ON, "\U000F0599");
      it.printf(240, weather_y, id(font_body), COLOR_ON, "10%%");
      it.printf(280, weather_y, id(font_weather_icons), COLOR_ON, "\U000F0596");
      
      // === MAIN CONTENT AREA ===
      int content_y = weather_y + weather_h + 10;
      int content_h = SCREEN_HEIGHT - content_y - MARGIN;
      
      // Left section - Temperature Trend Graph
      int left_w = 180;
      int graph_x = MARGIN;
      int graph_y = content_y;
      int graph_w = left_w;
      int graph_h = 100;
      
      // Graph title
      it.printf(graph_x, graph_y, id(font_caption), COLOR_ON, "4 Hour Temperature Trend");
      
      // Graph area background
      it.rectangle(graph_x, graph_y + 15, graph_w, graph_h - 15, COLOR_ON);
      
      // Y-axis labels
      it.printf(graph_x + 5, graph_y + 20, id(font_caption), COLOR_ON, "80");
      it.printf(graph_x + 5, graph_y + 40, id(font_caption), COLOR_ON, "60");
      it.printf(graph_x + 5, graph_y + 60, id(font_caption), COLOR_ON, "20");
      it.printf(graph_x + 5, graph_y + 80, id(font_caption), COLOR_ON, "0");
      
      // X-axis labels
      it.printf(graph_x + 30, graph_y + 85, id(font_caption), COLOR_ON, "10 AM");
      it.printf(graph_x + 70, graph_y + 85, id(font_caption), COLOR_ON, "2 PM");
      it.printf(graph_x + 110, graph_y + 85, id(font_caption), COLOR_ON, "4 PM");
      it.printf(graph_x + 150, graph_y + 85, id(font_caption), COLOR_ON, "6 PM");
      
      // Temperature trend line with filled area
      int temp_points[5];
      int temp_x_coords[5];
      
      // Calculate temperature points
      for (int i = 0; i < 5; i++) {
        temp_x_coords[i] = graph_x + 30 + i * 30;
        temp_points[i] = graph_y + 70 - i * 8; // Rising trend
      }
      
      // Fill area under the curve with light gray
      for (int x = temp_x_coords[0]; x <= temp_x_coords[4]; x++) {
        // Linear interpolation between points
        int segment = 0;
        for (int j = 0; j < 4; j++) {
          if (x <= temp_x_coords[j+1]) {
            segment = j;
            break;
          }
        }
        
        int x1 = temp_x_coords[segment];
        int x2 = temp_x_coords[segment + 1];
        int y1 = temp_points[segment];
        int y2 = temp_points[segment + 1];
        
        // Linear interpolation
        int y_curve = y1 + ((y2 - y1) * (x - x1)) / (x2 - x1);
        
        // Fill from baseline to curve
        it.line(x, graph_y + 78, x, y_curve, id(color_light_gray));
      }
      
      // Draw the temperature trend line and points
      for (int i = 0; i < 5; i++) {
        it.filled_circle(temp_x_coords[i], temp_points[i], 2, COLOR_ON);
        if (i > 0) {
          it.line(temp_x_coords[i-1], temp_points[i-1], temp_x_coords[i], temp_points[i], COLOR_ON);
        }
      }
      
      // Right side - Status indicators with individual boxes like in reference
      int right_x = graph_x + left_w + 20;
      int right_w = SCREEN_WIDTH - right_x - MARGIN;
      
      // Status indicators organized in 2 columns, 2 rows
      const char* status_items[] = {"Windows", "Door", "Window", "Garage"};
      const bool status_open[] = {false, false, false, false}; // all closed for demo
      const char* status_icons_closed[] = {"\U000F109E", "\U000F081C", "\U000F109E", "\U000F06D3"}; // window-maximize, door, window-maximize, garage
      const char* status_icons_open[] = {"\U000F05B0", "\U000F081D", "\U000F05B0", "\U000F06D4"}; // window-restore, door-open, window-restore, garage-open
      
      int box_w = right_w / 2; // 2 columns, no margin between
      int box_h = 45; // Taller boxes
      
      for (int i = 0; i < 4; i++) {
        int col = i % 2; // 0 or 1
        int row = i / 2; // 0 or 1
        int box_x = right_x + col * box_w;
        int box_y = graph_y + row * box_h;
        
        // Box background - white with black border
        it.filled_rectangle(box_x, box_y, box_w, box_h, COLOR_OFF);
        it.rectangle(box_x, box_y, box_w, box_h, COLOR_ON);
        
        // Icon at top center
        const char* icon = status_open[i] ? status_icons_open[i] : status_icons_closed[i];
        int icon_x = box_x + box_w/2 - 12; // Center horizontally
        it.printf(icon_x, box_y + 8, id(font_weather_icons), COLOR_ON, icon);
        
        // Status text at bottom
        int text_len = strlen(status_items[i]);
        int text_x = box_x + (box_w - text_len * 6) / 2; // Better centering calculation
        it.printf(text_x, box_y + box_h - 12, id(font_caption), COLOR_ON, status_items[i]);
      }
      
      // === BOTTOM CHARTS SECTION ===
      int charts_y = graph_y + graph_h + 15;
      int chart_h = SCREEN_HEIGHT - charts_y - MARGIN;
      
      // Left chart - Electricity Consumption
      int elec_x = MARGIN;
      int elec_w = (SCREEN_WIDTH - 3*MARGIN) / 2;
      
      it.printf(elec_x, charts_y, id(font_caption), COLOR_ON, "Consommation Electrique");
      
      // Chart background
      it.rectangle(elec_x, charts_y + 15, elec_w, chart_h - 20, COLOR_ON);
      
      // Bar chart data with corrected positioning
      int bar_count = 12;
      int bar_width = (elec_w - 30) / bar_count; // Adjust width calculation
      int chart_heights[] = {30, 15, 25, 35, 20, 40, 45, 25, 30, 20, 15, 25};
      int chart_base_y = charts_y + chart_h - 25; // Adjusted baseline
      
      for (int i = 0; i < bar_count; i++) {
        int bar_x = elec_x + 15 + i * bar_width; // Start from 15px margin
        int bar_h = chart_heights[i];
        if (bar_h > 0) {
          it.filled_rectangle(bar_x + 1, chart_base_y - bar_h, bar_width - 2, bar_h, COLOR_ON);
        }
      }
      
      // Chart labels
      it.printf(elec_x + 5, chart_base_y + 5, id(font_caption), COLOR_ON, "7 AM");
      
      // Right chart - Water Consumption (inverted colors)
      int water_x = elec_x + elec_w + MARGIN;
      int water_w = elec_w;
      
      // Black background for water chart
      it.filled_rectangle(water_x, charts_y, water_w, chart_h, COLOR_ON);
      
      it.printf(water_x + 10, charts_y + 5, id(font_caption), COLOR_OFF, "Consommation Eau");
      
      // White bars on black background with corrected positioning
      int water_heights[] = {40, 25, 35, 30, 45, 20, 25, 40, 30, 35, 25, 30};
      int water_base_y = charts_y + chart_h - 25; // Same baseline as electricity
      
      for (int i = 0; i < bar_count; i++) {
        int bar_x = water_x + 15 + i * bar_width; // Same margin as electricity chart
        int bar_h = water_heights[i];
        if (bar_h > 0) {
          it.filled_rectangle(bar_x + 1, water_base_y - bar_h, bar_width - 2, bar_h, COLOR_OFF);
        }
      }
      
      // Chart labels
      it.printf(water_x + 5, water_base_y + 5, id(font_caption), COLOR_OFF, "7 AM");
      
      // === DIVIDER LINES ===
      // Horizontal dividers
      it.line(0, 60, SCREEN_WIDTH, 60, COLOR_ON);
      it.line(0, weather_y + weather_h + 5, SCREEN_WIDTH, weather_y + weather_h + 5, id(color_light_gray));
      
      // Vertical divider between charts
      it.line(elec_x + elec_w + MARGIN/2, charts_y, elec_x + elec_w + MARGIN/2, SCREEN_HEIGHT - MARGIN, COLOR_ON);

# Sensors for real weather data integration
sensor:
  - platform: homeassistant
    id: outdoor_temperature
    entity_id: weather.forecast_home
    attribute: temperature
    
  - platform: homeassistant
    id: outdoor_humidity
    entity_id: weather.forecast_home
    attribute: humidity
    
  - platform: homeassistant
    id: pressure
    entity_id: weather.forecast_home
    attribute: pressure
    
  - platform: homeassistant
    id: wind_speed
    entity_id: weather.forecast_home
    attribute: wind_speed

  # Indoor sensors (if you have them)
  - platform: homeassistant
    id: indoor_temperature
    entity_id: sensor.indoor_temperature
    
  - platform: homeassistant
    id: indoor_humidity
    entity_id: sensor.indoor_humidity

# Text sensors for conditions and forecasts
text_sensor:
  - platform: homeassistant
    id: weather_condition
    entity_id: weather.forecast_home
    
  - platform: homeassistant
    id: weather_forecast
    entity_id: weather.forecast_home
    attribute: forecast

# Automation for smart updates
script:
  - id: smart_update
    then:
      - logger.log: "Smart update triggered"
      - component.update: eink_display

# Button for manual refresh
button:
  - platform: template
    name: "Refresh Dashboard"
    on_press:
      then:
        - script.execute: smart_update

# Deep sleep management for power efficiency
deep_sleep:
  id: deep_sleep_control
  sleep_duration: 30min
  
# Wake up button
binary_sensor:
  - platform: gpio
    pin:
      number: GPIO0
      inverted: true
      mode:
        input: true
        pullup: true
    name: "Wake Up Button"
    on_press:
      then:
        - deep_sleep.prevent: deep_sleep_control
        - script.execute: smart_update

# Status LED for feedback
status_led:
  pin:
    number: GPIO2
    inverted: true
